# 메가존 BO Next.js 프로젝트 - Cursor 규칙

## 🎯 프로젝트 개요
Next.js 15 + React 19 + TypeScript + Tailwind CSS 4.1 + shadcn/ui 기반의 인천공항 웹 애플리케이션 BO 시스템

## 📁 프로젝트 구조

### 디렉토리 구조
```
bo/
├── app/                        # Next.js App Router
│   ├── (auth)/                # 인증 관련 라우트 그룹
│   ├── (main)/                # 메인 애플리케이션 라우트 그룹
│   ├── api/                   # API Route Handlers
│   ├── products/              # 제품 관련 페이지
│   ├── layout.tsx             # 루트 레이아웃
│   ├── page.tsx               # 홈페이지
│   ├── loading.tsx            # 로딩 UI
│   ├── not-found.tsx          # 404 페이지
│   └── global-error.tsx       # 전역 에러 처리
├── components/                 # 재사용 가능한 컴포넌트
│   ├── ui/                    # shadcn/ui 기본 컴포넌트
│   ├── common/                # 공통 컴포넌트
│   └── page/                  # 페이지별 컴포넌트
├── hooks/                     # 커스텀 훅
├── lib/                       # 유틸리티, API 클라이언트, 스키마
│   ├── utils.ts               # 유틸리티 함수
│   ├── httpClient.ts           # API 클라이언트
│   └── schema/                # Zod 스키마
├── services/                  # API 서비스 레이어
│   └── auth/                  # 인증 서비스
├── store/                     # Zustand 상태 관리
├── types/                     # TypeScript 타입 정의
├── styles/                    # 전역 스타일
└── public/                    # 정적 에셋
```

## 🛠 기술 스택 및 도구

### 핵심 기술
- **Next.js 15**: App Router, Turbopack 개발 서버
- **React 19**: 최신 React 기능 활용
- **TypeScript**: strict 모드, 타입 안전성
- **Tailwind CSS 4.1**: 유틸리티 우선 스타일링
- **shadcn/ui**: 재사용 가능한 UI 컴포넌트

### 상태 관리 & 폼
- **Zustand**: 경량 전역 상태 관리
- **React Hook Form**: 성능 최적화된 폼 관리
- **Zod**: 스키마 기반 유효성 검사

### 개발 도구
- **ESLint**: 코드 품질 검사
- **Prettier**: 코드 포맷팅
- **pnpm**: 패키지 매니저

## 📝 코딩 컨벤션

### 네이밍 규칙
- **컴포넌트**: PascalCase (`UserProfile.tsx`)
- **파일명**: kebab-case 또는 camelCase (`use-mobile.ts`, `httpClient.ts`)
- **훅**: camelCase + 'use' prefix (`useDebounce`, `useMobile`)
- **유틸리티 함수**: camelCase (`formatDate`, `cn`)
- **상수**: UPPER_SNAKE_CASE (`API_BASE_URL`)
- **타입/인터페이스**: PascalCase (`User`, `ApiResponse`)

### 컴포넌트 작성 규칙

#### 기본 구조
```typescript
interface ComponentProps {
  children?: React.ReactNode;
  className?: string;
  // 기타 props...
}

export default function Component({ 
  children, 
  className,
  ...props 
}: ComponentProps) {
  return (
    <div className={cn("base-styles", className)} {...props}>
      {children}
    </div>
  );
}
```

#### shadcn/ui 컴포넌트 활용
- `@/components/ui`에서 기본 UI 컴포넌트 import
- `cn()` 유틸리티로 조건부 스타일 적용
- `className` prop 항상 허용하여 확장성 보장

### 스타일링 가이드라인
- **Tailwind CSS** 우선 사용
- **모바일 퍼스트** 반응형 디자인
- **CSS 변수** 활용한 테마 시스템
- **shadcn/ui** 디자인 시스템 준수

### 상태 관리 패턴

#### 로컬 상태
```typescript
// 단순한 상태
const [isOpen, setIsOpen] = useState(false);

// 복잡한 상태
const [state, dispatch] = useReducer(reducer, initialState);
```

#### 전역 상태 (Zustand)
```typescript
// store/index.ts
interface AppState {
  user: User | null;
  setUser: (user: User | null) => void;
}

export const useAppStore = create<AppState>((set) => ({
  user: null,
  setUser: (user) => set({ user }),
}));
```

#### 폼 상태 (React Hook Form + Zod)
```typescript
const form = useForm<FormData>({
  resolver: zodResolver(schema),
  defaultValues: {
    // 기본값
  },
});
```

### API 호출 패턴

#### API 클라이언트 사용
```typescript
// lib/httpClient.ts 활용
import { httpClient } from '@/lib/httpClient';

// services/ 디렉토리에서 추상화
export const userService = {
  getUser: (id: string) => httpClient.get(`/users/${id}`),
  updateUser: (id: string, data: UpdateUserData) => 
    httpClient.put(`/users/${id}`, data),
};
```

### 에러 처리
- **페이지 레벨**: `error.tsx`, `global-error.tsx`
- **컴포넌트 레벨**: ErrorBoundary 활용
- **API 호출**: try-catch 블록과 사용자 친화적 메시지

### 타입 정의
```typescript
// types/index.ts
export interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'user';
}

export interface ApiResponse<T> {
  data: T;
  message: string;
  success: boolean;
}
```

## 🚀 개발 가이드라인

### 새 기능 개발 프로세스
1. **타입 정의** 먼저 작성 (`types/`)
2. **API 서비스** 구현 (`services/`)
3. **컴포넌트** 개발 (`components/`)
4. **페이지** 구성 (`app/`)
5. **테스트** 작성 (권장)

### 컴포넌트 설계 원칙
- **단일 책임 원칙**: 하나의 컴포넌트는 하나의 역할
- **재사용성**: props를 통한 유연한 설계
- **접근성**: ARIA 속성, 키보드 네비게이션 고려
- **성능**: React.memo, useMemo, useCallback 적절히 활용

### 성능 최적화
- **동적 import**: `next/dynamic` 활용
- **이미지 최적화**: `next/image` 사용
- **코드 분할**: 라우트 기반 자동 분할
- **메타데이터**: Next.js metadata API 활용

### 환경 설정
- **환경변수**: `.env.local` 사용
- **타입 안전성**: 환경변수 타입 검증
- **경로 별칭**: `@/*` 절대 경로 사용

## 📋 코드 리뷰 체크리스트

### 필수 확인 사항
- [ ] TypeScript 타입 안전성 확보
- [ ] 컴포넌트 재사용성 고려
- [ ] 접근성(a11y) 준수
- [ ] 성능 최적화 적용
- [ ] 에러 처리 구현
- [ ] 일관된 네이밍 컨벤션
- [ ] shadcn/ui 컴포넌트 활용
- [ ] 반응형 디자인 적용

### 코드 품질
- ESLint 규칙 준수
- Prettier 포맷팅 적용
- 불필요한 console.log 제거
- 주석은 필요한 경우에만 작성

## 🔧 Git 컨벤션

### 커밋 메시지 형식
```
type(scope): description

feat(auth): 로그인 페이지 구현
fix(ui): 버튼 스타일 수정
docs(readme): 설치 가이드 업데이트
style(components): 코드 포맷팅 적용
refactor(api): API 클라이언트 구조 개선
test(hooks): useDebounce 훅 테스트 추가
chore(deps): 의존성 업데이트
```

### 브랜치 전략
- `main`: 프로덕션 브랜치
- `develop`: 개발 브랜치
- `feature/*`: 기능 개발 브랜치
- `fix/*`: 버그 수정 브랜치

이 규칙들을 준수하여 일관성 있고 확장 가능한 BO 시스템을 구축해주세요. 