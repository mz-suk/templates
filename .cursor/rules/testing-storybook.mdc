---
description: Vitest 테스팅 & Storybook 컴포넌트 문서화 가이드
globs: ["**/*.test.tsx", "**/*.stories.tsx", "__tests__/**/*", "stories/**/*"]
alwaysApply: false
---

# 테스팅 & Storybook 개발 규칙

## Vitest 테스트 패턴

### 기본 컴포넌트 테스트
```tsx
// __tests__/components/Button.test.tsx
import { describe, it, expect, vi } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from '@/components/ui/Button';

describe('Button 컴포넌트', () => {
  it('기본 버튼이 렌더링된다', () => {
    render(<Button>클릭하세요</Button>);
    
    const button = screen.getByRole('button', { name: '클릭하세요' });
    expect(button).toBeInTheDocument();
  });

  it('disabled 상태에서 클릭이 방지된다', () => {
    const handleClick = vi.fn();
    
    render(<Button disabled onClick={handleClick}>버튼</Button>);
    
    const button = screen.getByRole('button');
    fireEvent.click(button);
    
    expect(handleClick).not.toHaveBeenCalled();
  });

  it('variant에 따라 올바른 클래스가 적용된다', () => {
    render(<Button variant="destructive">삭제</Button>);
    
    const button = screen.getByRole('button');
    expect(button).toHaveClass('bg-destructive');
  });
});
```

### 커스텀 훅 테스트
```tsx
// __tests__/hooks/useAuth.test.tsx
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { renderHook, act } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { useAuth } from '@/hooks/useAuth';

global.fetch = vi.fn();

const createWrapper = () => {
  const queryClient = new QueryClient({
    defaultOptions: { queries: { retry: false } },
  });
  
  return ({ children }: { children: React.ReactNode }) => (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
};

describe('useAuth 훅', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('초기 상태가 올바르다', () => {
    const { result } = renderHook(() => useAuth(), {
      wrapper: createWrapper(),
    });

    expect(result.current.user).toBeNull();
    expect(result.current.isAuthenticated).toBe(false);
  });

  it('로그인이 성공적으로 처리된다', async () => {
    const mockUser = { id: '1', name: '홍길동' };
    
    (global.fetch as any).mockResolvedValueOnce({
      ok: true,
      json: () => Promise.resolve(mockUser),
    });

    const { result } = renderHook(() => useAuth(), {
      wrapper: createWrapper(),
    });

    await act(async () => {
      await result.current.login({
        email: 'hong@example.com',
        password: 'password123',
      });
    });

    expect(result.current.user).toEqual(mockUser);
  });
});
```

### 폼 테스트
```tsx
// __tests__/components/UserForm.test.tsx
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { UserForm } from '@/components/page/UserForm';

describe('UserForm 컴포넌트', () => {
  it('폼 제출이 올바르게 처리된다', async () => {
    const user = userEvent.setup();
    const handleSubmit = vi.fn();

    render(<UserForm onSubmit={handleSubmit} />);

    await user.type(screen.getByLabelText('이름'), '홍길동');
    await user.type(screen.getByLabelText('이메일'), 'hong@example.com');
    await user.click(screen.getByRole('button', { name: '등록' }));

    await waitFor(() => {
      expect(handleSubmit).toHaveBeenCalledWith({
        name: '홍길동',
        email: 'hong@example.com',
      });
    });
  });

  it('유효성 검사 오류가 표시된다', async () => {
    const user = userEvent.setup();

    render(<UserForm onSubmit={vi.fn()} />);
    await user.click(screen.getByRole('button', { name: '등록' }));

    await waitFor(() => {
      expect(screen.getByText('이름은 필수입니다')).toBeInTheDocument();
    });
  });
});
```

## Storybook 스토리 패턴

### 기본 컴포넌트 스토리
```tsx
// stories/Button.stories.tsx
import type { Meta, StoryObj } from '@storybook/react';
import { Button } from '@/components/ui/Button';

const meta: Meta<typeof Button> = {
  title: 'UI/Button',
  component: Button,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: 'select',
      options: ['default', 'destructive', 'outline', 'secondary', 'ghost'],
    },
    size: {
      control: 'select',
      options: ['default', 'sm', 'lg', 'icon'],
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    children: '기본 버튼',
  },
};

export const Destructive: Story = {
  args: {
    children: '삭제',
    variant: 'destructive',
  },
};

export const Small: Story = {
  args: {
    children: '작은 버튼',
    size: 'sm',
  },
};

export const Disabled: Story = {
  args: {
    children: '비활성화',
    disabled: true,
  },
};
```

### 인터랙티브 스토리
```tsx
// stories/UserForm.stories.tsx
import type { Meta, StoryObj } from '@storybook/react';
import { action } from '@storybook/addon-actions';
import { within, userEvent, expect } from '@storybook/test';
import { UserForm } from '@/components/page/UserForm';

const meta: Meta<typeof UserForm> = {
  title: 'Forms/UserForm',
  component: UserForm,
  args: {
    onSubmit: action('onSubmit'),
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {};

export const WithValidation: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    
    const submitButton = canvas.getByRole('button', { name: '등록' });
    await userEvent.click(submitButton);
    
    await expect(canvas.getByText('이름은 필수입니다')).toBeInTheDocument();
  },
};

export const FilledForm: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    
    await userEvent.type(canvas.getByLabelText('이름'), '홍길동');
    await userEvent.type(canvas.getByLabelText('이메일'), 'hong@example.com');
  },
};
```

### 페이지 레벨 스토리
```tsx
// stories/LoginPage.stories.tsx
import type { Meta, StoryObj } from '@storybook/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { LoginPage } from '@/app/(public)/(auth)/login/page';

const QueryWrapper = ({ children }: { children: React.ReactNode }) => {
  const queryClient = new QueryClient({
    defaultOptions: { queries: { retry: false } },
  });
  
  return (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
};

const meta: Meta<typeof LoginPage> = {
  title: 'Pages/LoginPage',
  component: LoginPage,
  decorators: [
    (Story) => (
      <QueryWrapper>
        <div className="min-h-screen bg-gray-50">
          <Story />
        </div>
      </QueryWrapper>
    ),
  ],
  parameters: {
    layout: 'fullscreen',
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {};
```

## 테스트 유틸리티

### 커스텀 렌더 함수
```tsx
// __tests__/utils/test-utils.tsx
import { ReactElement } from 'react';
import { render, RenderOptions } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';

const createTestQueryClient = () =>
  new QueryClient({
    defaultOptions: { queries: { retry: false } },
  });

const AllProviders = ({ children }: { children: React.ReactNode }) => {
  const queryClient = createTestQueryClient();
  
  return (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
};

const customRender = (
  ui: ReactElement,
  options?: Omit<RenderOptions, 'wrapper'>
) => render(ui, { wrapper: AllProviders, ...options });

export * from '@testing-library/react';
export { customRender as render };
```

### Mock 데이터 팩토리
```tsx
// __tests__/utils/factories.ts
import { User, Product } from '@/types';

export const createMockUser = (overrides?: Partial<User>): User => ({
  id: '1',
  name: '홍길동',
  email: 'hong@example.com',
  createdAt: '2024-01-01T00:00:00Z',
  ...overrides,
});

export const createMockProduct = (overrides?: Partial<Product>): Product => ({
  id: '1',
  name: '테스트 상품',
  price: 10000,
  description: '테스트용 상품',
  ...overrides,
});
```

## 테스트 설정

### Vitest 설정
```typescript
// vitest.config.ts
import { defineConfig } from 'vitest/config';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
    setupFiles: ['./src/__tests__/setup.ts'],
    globals: true,
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
});
```

### 테스트 설정 파일
```typescript
// __tests__/setup.ts
import '@testing-library/jest-dom';
import { vi } from 'vitest';

// Mock DOM APIs
global.IntersectionObserver = vi.fn().mockImplementation(() => ({
  observe: vi.fn(),
  unobserve: vi.fn(),
  disconnect: vi.fn(),
}));

Object.defineProperty(window, 'matchMedia', {
  value: vi.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
  })),
});
```

## 참조 파일

- @vitest.config.ts - Vitest 설정
- @.storybook/ - Storybook 설정
- @__tests__/setup.ts - 테스트 환경 설정
- @stories/ - Storybook 스토리