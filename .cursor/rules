# 메가존 BO Next.js 프로젝트 - Cursor AI 코딩 규칙

이 프로젝트는 Next.js 15 + React 19 + TypeScript + Tailwind CSS 4.1 + shadcn/ui 기반의 인천공항 웹 애플리케이션 BO 시스템입니다.

## 🎯 기본 원칙

1. **타입 안전성 우선**: 모든 코드는 TypeScript strict 모드에서 타입 에러가 없어야 합니다.
2. **성능 최적화**: React 19의 최신 기능과 Next.js 15의 최적화 기능을 적극 활용합니다.
3. **일관성 유지**: 기존 코드 스타일과 패턴을 따릅니다.
4. **접근성 고려**: ARIA 속성과 키보드 네비게이션을 고려합니다.

## 📁 디렉토리 구조 규칙

- `app/`: Next.js App Router 페이지와 레이아웃
- `components/ui/`: shadcn/ui 기본 컴포넌트
- `components/common/`: 프로젝트 전반에서 사용되는 공통 컴포넌트
- `components/page/`: 특정 페이지나 도메인에 특화된 컴포넌트
- `hooks/`: 커스텀 React 훅
- `lib/`: 유틸리티 함수, API 클라이언트, 스키마
- `services/`: API 호출을 추상화한 서비스 레이어
- `store/`: Zustand 기반 전역 상태 관리
- `types/`: TypeScript 타입 정의

## 🧩 컴포넌트 작성 규칙

### 기본 구조
```typescript
interface ComponentProps {
  children?: React.ReactNode;
  className?: string;
  // 다른 필요한 props
}

export default function Component({ 
  children, 
  className,
  ...props 
}: ComponentProps) {
  return (
    <div className={cn("기본-스타일", className)} {...props}>
      {children}
    </div>
  );
}
```

### 필수 사항
- 모든 컴포넌트는 TypeScript interface로 props 타입 정의
- `className` prop을 항상 허용하여 스타일 확장성 보장
- `cn()` 유틸리티 함수로 조건부 스타일 적용
- 컴포넌트명은 PascalCase 사용

## 🎨 스타일링 규칙

1. **Tailwind CSS 우선**: CSS 모듈이나 styled-components 대신 Tailwind 사용
2. **모바일 퍼스트**: 반응형 디자인은 모바일부터 시작
3. **shadcn/ui 준수**: 기존 디자인 시스템과 일관성 유지
4. **CSS 변수 활용**: 테마 색상은 CSS 변수로 정의

## 📝 네이밍 컨벤션

- **컴포넌트**: PascalCase (`UserProfile.tsx`)
- **파일명**: kebab-case 또는 camelCase (`use-mobile.ts`, `httpClient.ts`)
- **함수/변수**: camelCase (`handleSubmit`, `userData`)
- **상수**: UPPER_SNAKE_CASE (`API_BASE_URL`)
- **타입/인터페이스**: PascalCase (`User`, `ApiResponse`)
- **훅**: 'use' prefix + camelCase (`useDebounce`, `useMobile`)

## 🔄 상태 관리 패턴

### 로컬 상태
```typescript
// 단순한 boolean 상태
const [isOpen, setIsOpen] = useState(false);

// 복잡한 객체 상태
const [formData, setFormData] = useState<FormData>(initialData);
```

### 전역 상태 (Zustand)
```typescript
interface AppState {
  user: User | null;
  setUser: (user: User | null) => void;
}

export const useAppStore = create<AppState>((set) => ({
  user: null,
  setUser: (user) => set({ user }),
}));
```

### 폼 상태 (React Hook Form + Zod)
```typescript
const form = useForm<FormData>({
  resolver: zodResolver(schema),
  defaultValues: {
    // 기본값
  },
});
```

## 🌐 API 호출 규칙

1. **서비스 레이어 사용**: `services/` 디렉토리에서 API 호출 추상화
2. **타입 안전성**: API 응답과 요청 모두 타입 정의
3. **에러 처리**: 모든 API 호출에 적절한 에러 처리 추가
4. **로딩 상태**: 사용자 경험을 위한 로딩 상태 관리

### API 서비스 예시
```typescript
// services/userService.ts
export const userService = {
  getUser: (id: string): Promise<User> => 
    httpClient.get(`/users/${id}`),
  
  updateUser: (id: string, data: UpdateUserData): Promise<User> => 
    httpClient.put(`/users/${id}`, data),
};
```

## 🚨 에러 처리

1. **페이지 레벨**: `error.tsx`와 `global-error.tsx` 활용
2. **컴포넌트 레벨**: React Error Boundary 사용
3. **API 호출**: try-catch와 사용자 친화적 메시지
4. **폼 검증**: Zod 스키마로 클라이언트 사이드 검증

## 🎯 성능 최적화

1. **동적 임포트**: 무거운 컴포넌트는 `next/dynamic` 사용
2. **이미지 최적화**: `next/image` 컴포넌트 필수 사용
3. **메모이제이션**: `React.memo`, `useMemo`, `useCallback` 적절히 활용
4. **코드 분할**: 라우트 기반 자동 분할 활용

## 📱 접근성 규칙

1. **ARIA 라벨**: 모든 interactive 요소에 적절한 ARIA 속성
2. **키보드 네비게이션**: Tab, Enter, Escape 키 지원
3. **색상 대비**: WCAG 가이드라인 준수
4. **스크린 리더**: 의미있는 텍스트와 구조 제공

## 🧪 테스트 가이드라인

1. **컴포넌트 테스트**: Jest + @testing-library/react
2. **UI 문서화**: Storybook으로 컴포넌트 스토리 작성
3. **타입 검증**: TypeScript 컴파일 시 타입 에러 제거
4. **E2E 테스트**: 추후 Playwright 도입 예정

## 🔧 개발 도구 사용법

### ESLint
```bash
pnpm lint        # 코드 검사
pnpm lint:fix    # 자동 수정
```

### Prettier
```bash
pnpm format      # 코드 포맷팅
pnpm format:check # 포맷 검사
```

### TypeScript
```bash
pnpm type        # 타입 검사
pnpm type:watch  # 타입 검사 (watch 모드)
```

## 📋 코드 리뷰 체크리스트

- [ ] TypeScript 타입 에러 없음
- [ ] ESLint 규칙 준수
- [ ] Prettier 포맷팅 적용
- [ ] 접근성 고려 (ARIA, 키보드 네비게이션)
- [ ] 성능 최적화 (불필요한 리렌더링 방지)
- [ ] 에러 처리 적절히 구현
- [ ] 재사용성 고려한 컴포넌트 설계
- [ ] 일관된 네이밍 컨벤션 사용

## 🚀 배포 전 확인사항

1. **빌드 성공**: `pnpm build` 에러 없이 완료
2. **타입 검사**: `pnpm type` 에러 없음
3. **린트 검사**: `pnpm lint` 경고 최소화
4. **환경변수**: 필요한 환경변수 모두 설정
5. **성능 검사**: Lighthouse 점수 확인

## 📚 참고 문서

- [Next.js 15 Documentation](https://nextjs.org/docs)
- [React 19 Documentation](https://react.dev/)
- [shadcn/ui Components](https://ui.shadcn.com/)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [Zustand Documentation](https://zustand-demo.pmnd.rs/)

---

**이 규칙들을 준수하여 일관성 있고 유지보수 가능한 코드를 작성해주세요.** 